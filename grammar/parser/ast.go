// Code generated by "grammar -i=g.txt".

package parser

import (
	"errors"

	"github.com/PlayerR9/SlParser/ast"
	"github.com/PlayerR9/SlParser/grammar"
)

var (
	Ast ast.AST[*Node]
)

func init() {
	var builder ast.Builder[*Node]
	defer builder.Reset()

	builder.Register(EtEOF, func(token *grammar.Token) ([]*Node, error) {
		if token == nil {
			return nil, errors.New("token must not be nil")
		}

		// TODO: Write here the logic for turning the token into an AST node...

		panic("implement me")
	})

	builder.Register(NtLhs, func(token *grammar.Token) ([]*Node, error) {
		if token == nil {
			return nil, errors.New("token must not be nil")
		}

		// TODO: Write here the logic for turning the token into an AST node...

		panic("implement me")
	})

	builder.Register(NtOrExpr, func(token *grammar.Token) ([]*Node, error) {
		if token == nil {
			return nil, errors.New("token must not be nil")
		}

		// TODO: Write here the logic for turning the token into an AST node...

		panic("implement me")
	})

	builder.Register(NtRhss, func(token *grammar.Token) ([]*Node, error) {
		if token == nil {
			return nil, errors.New("token must not be nil")
		}

		// TODO: Write here the logic for turning the token into an AST node...

		panic("implement me")
	})

	builder.Register(NtRule, func(token *grammar.Token) ([]*Node, error) {
		if token == nil {
			return nil, errors.New("token must not be nil")
		}

		// TODO: Write here the logic for turning the token into an AST node...

		panic("implement me")
	})

	builder.Register(NtSource, func(token *grammar.Token) ([]*Node, error) {
		if token == nil {
			return nil, errors.New("token must not be nil")
		}

		// TODO: Write here the logic for turning the token into an AST node...

		panic("implement me")
	})

	builder.Register(NtSource1, func(token *grammar.Token) ([]*Node, error) {
		if token == nil {
			return nil, errors.New("token must not be nil")
		}

		// TODO: Write here the logic for turning the token into an AST node...

		panic("implement me")
	})

	builder.Register(TtColon, func(token *grammar.Token) ([]*Node, error) {
		if token == nil {
			return nil, errors.New("token must not be nil")
		}

		// TODO: Write here the logic for turning the token into an AST node...

		panic("implement me")
	})

	builder.Register(TtPipe, func(token *grammar.Token) ([]*Node, error) {
		if token == nil {
			return nil, errors.New("token must not be nil")
		}

		// TODO: Write here the logic for turning the token into an AST node...

		panic("implement me")
	})

	builder.Register(TtRhs, func(token *grammar.Token) ([]*Node, error) {
		if token == nil {
			return nil, errors.New("token must not be nil")
		}

		// TODO: Write here the logic for turning the token into an AST node...

		panic("implement me")
	})

	builder.Register(TtSemicolon, func(token *grammar.Token) ([]*Node, error) {
		if token == nil {
			return nil, errors.New("token must not be nil")
		}

		// TODO: Write here the logic for turning the token into an AST node...

		panic("implement me")
	})

	Ast = builder.Build()
}
